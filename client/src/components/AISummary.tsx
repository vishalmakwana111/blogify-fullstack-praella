import React, { useState } from 'react';
import { aiService } from '../services/aiService';
import { useAuth } from '../contexts/AuthContext';

interface AISummaryProps {
  postId: string;
  postTitle: string;
}

const AISummary: React.FC<AISummaryProps> = ({ postId }) => {
  const [summary, setSummary] = useState<string>('');
  const [wordCount, setWordCount] = useState<number>(0);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string>('');
  const [isVisible, setIsVisible] = useState(false);
  
  const { user } = useAuth();

  const handleGenerateSummary = async () => {
    if (!user) {
      setError('Please log in to use AI features');
      return;
    }

    setIsLoading(true);
    setError('');
    
    try {
      const response = await aiService.summarizePost(postId);
      
      if (response.success && response.data) {
        setSummary(response.data.summary);
        setWordCount(response.data.wordCount);
        setIsVisible(true);
      } else {
        setError(response.message || 'Failed to generate summary');
      }
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError('An unexpected error occurred');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleClose = () => {
    setIsVisible(false);
    setSummary('');
    setWordCount(0);
    setError('');
  };

  // Don't show the button if user is not logged in
  if (!user) {
    return null;
  }

  return (
    <div className="ai-summary-container">
      {/* AI Summary Button */}
      {!isVisible && (
        <button
          onClick={handleGenerateSummary}
          disabled={isLoading}
          className={`
            inline-flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium
            transition-all duration-200 transform hover:scale-105
            ${isLoading 
              ? 'bg-gray-100 text-gray-400 cursor-not-allowed' 
              : 'bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white shadow-lg hover:shadow-xl'
            }
          `}
        >
          {isLoading ? (
            <>
              <div className="w-4 h-4 border-2 border-gray-300 border-t-transparent rounded-full animate-spin"></div>
              Generating...
            </>
          ) : (
            <>
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
              </svg>
              AI Summarize
            </>
          )}
        </button>
      )}

      {/* Error Message */}
      {error && (
        <div className="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center gap-2">
            <svg className="w-4 h-4 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <p className="text-sm text-red-700">{error}</p>
          </div>
        </div>
      )}

      {/* AI Summary Display */}
      {isVisible && summary && (
        <div className="mt-4 p-4 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-xl shadow-sm">
          <div className="flex items-start justify-between mb-3">
            <div className="flex items-center gap-2">
              <div className="p-1.5 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg">
                <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                </svg>
              </div>
              <div>
                <h4 className="text-sm font-semibold text-gray-800">AI Summarize</h4>
                <p className="text-xs text-gray-500">{wordCount} words • Generated by Gemini AI</p>
              </div>
            </div>
            <button
              onClick={handleClose}
              className="text-gray-400 hover:text-gray-600 transition-colors"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          
          <div className="bg-white rounded-lg p-3 border border-gray-100">
            <p className="text-sm leading-relaxed text-gray-700">{summary}</p>
          </div>
          
          <div className="mt-3 flex items-center justify-between text-xs text-gray-500">
            <span>✨ AI-generated content may not be 100% accurate</span>
            <span>Powered by Google Gemini</span>
          </div>
        </div>
      )}
    </div>
  );
};

export default AISummary; 